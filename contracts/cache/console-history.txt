await staking.stake(ethers.parseUnits("1", "ether"));
console.log("Staked Amount:", stakerData.amount.toString());
const stakerData = await staking.stakers("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");
console.log(staking.interface.fragments.map(f => f.format()));
console.log(Object.keys(staking.interface.functions));
console.log("Stake successful!");
await stakeTx.wait();
const stakeTx = await staking.stake(ethers.parseUnits("1", "ether"));
// Call stake with the amount (do not pass a value)
console.log("Approval successful");
await approveTx.wait();
const approveTx = await bareCoin.approve("0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512", ethers.parseUnits("1", "ether"));
// Approve the staking contract to spend, say, 1 BRC (converted to 18 decimals)
const bareCoin = await ethers.getContractAt("BareCoin", "0xYourBareCoinAddress");
// Get your BareCoin instance (assume you deployed it and have its address)
}
    ...
    // It calls token.transferFrom(...) â€“ so it expects an approved ERC20 token transfer.
    require(_amount >= minStakeAmount, "Amount too low");
function stake(uint256 _amount) public {
console.log("Accumulated Reward:", stakerData.reward.toString());
console.log("Staked Amount:", stakerData.amount.toString());
const stakerData = await staking.stakers("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");
await staking.vote(proposals[0].id, true);
const proposals = await staking.getAllProposals();
console.log(balance.toString());
const balance = await staking["getStakeBalance(address)"]("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");
await staking.stake({ value: ethers.parseUnits("1", "ether") });
console.log(Object.keys(staking.interface.functions));
console.log(staking);
await staking.vote(proposals[0].id, true);
console.log(proposals);
const proposals = await staking.getAllProposals();
console.log(balance.toString());
const balance = await staking["getStakeBalance(address)"]("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");
console.log(Object.keys(staking.interface.functions));
Uncaught TypeError: staking.getStakeBalance is not a function
console.log(Object.keys(staking.interface.functions));
await staking.stake({ value: ethers.parseUnits("1", "ether") });
console.log(staking);
const staking = await ethers.getContractAt("StakingGovernance", stakingAddress);
const stakingAddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512";
console.log(staking);
Uncaught TypeError: Cannot convert undefined or null to object
await staking.vote(proposalId, true);  // Voting "Yes" on a proposal
console.log(balance.toString());
const balance = await staking.getStakeBalance("0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266");
await staking.stake({ value: ethers.parseEther("1") });
console.log(Object.keys(staking.interface.functions));
console.log(owner);
const owner = await staking.owner();  // Example interaction
const staking = await ethers.getContractAt("StakingGovernance", "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512");
console.log(Object.keys(stakingGovernance.interface.functions));